#ifndef ALL_HEADERS
#define ALL_HEADERS

#include "01 Creating a Vulkan Instance with WSI extensions enabled.h"
#include "02 Creating a presentation surface.h"
#include "03 Selecting a queue family that supports presentation to a given surface.h"
#include "04 Creating a logical device with WSI extensions enabled.h"
#include "05 Selecting a desired presentation mode.h"
#include "06 Getting capabilities of a presentation surface.h"
#include "07 Selecting a number of swapchain images.h"
#include "08 Choosing a size of swapchain images.h"
#include "09 Selecting desired usage scenarios of swapchain images.h"
#include "10 Selecting a transformation of swapchain images.h"
#include "11 Selecting a format of swapchain images.h"
#include "12 Creating a swapchain.h"
#include "13 Getting handles of swapchain images.h"
#include "14 Creating a swapchain with R8G8B8A8 format and a MAILBOX present mode.h"
#include "15 Acquiring a swapchain image.h"
#include "16 Presenting an image.h"
#include "17 Destroying a swapchain.h"
#include "18 Destroying a presentation surface.h"

#include "01 Creating a command pool.h"
#include "02 Allocating command buffers.h"
#include "03 Beginning a command buffer recording operation.h"
#include "04 Ending a command buffer recording operation.h"
#include "05 Resetting a command buffer.h"
#include "06 Resetting a command pool.h"
#include "07 Creating a semaphore.h"
#include "08 Creating a fence.h"
#include "09 Waiting for fences.h"
#include "10 Resetting fences.h"
#include "11 Submitting command buffers to the queue.h"
#include "12 Synchronizing two command buffers.h"
#include "13 Checking if processing of a submitted command buffer has finished.h"
#include "14 Waiting until all commands submitted to a queue are finished.h"
#include "15 Waiting for all submitted commands to be finished.h"
#include "16 Destroying a fence.h"
#include "17 Destroying a semaphore.h"
#include "18 Freeing command buffers.h"
#include "19 Destroying a command pool.h"

#include "01 Creating a buffer.h"
#include "02 Allocating and binding memory object to a buffer.h"
#include "03 Setting a buffer memory barrier.h"
#include "04 Creating a buffer view.h"
#include "05 Creating an image.h"
#include "06 Allocating and binding memory object to an image.h"
#include "07 Setting an image memory barrier.h"
#include "08 Creating an image view.h"
#include "09 Creating a 2D image and view.h"
#include "10 Creating a layered 2D image with a CUBEMAP view.h"
#include "11 Mapping, updating and unmapping host-visible memory.h"
#include "12 Copying data between buffers.h"
#include "13 Copying data from a buffer to an image.h"
#include "14 Copying data from an image to a buffer.h"
#include "15 Using staging buffer to update a buffer with a device-local memory bound.h"
#include "16 Using staging buffer to update an image with a device-local memory bound.h"
#include "17 Destroying an image view.h"
#include "18 Destroying an image.h"
#include "19 Destroying a buffer view.h"
#include "20 Freeing a memory object.h"
#include "21 Destroying a buffer.h"

#include "01 Creating a sampler.h"
#include "02 Creating a sampled image.h"
#include "03 Creating a combined image sampler.h"
#include "04 Creating a storage image.h"
#include "05 Creating a uniform texel buffer.h"
#include "06 Creating a storage texel buffer.h"
#include "07 Creating a uniform buffer.h"
#include "08 Creating a storage buffer.h"
#include "09 Creating an input attachment.h"
#include "10 Creating a descriptor set layout.h"
#include "11 Creating a descriptor pool.h"
#include "12 Allocating descriptor sets.h"
#include "13 Updating descriptor sets.h"
#include "14 Binding descriptor sets.h"
#include "15 Creating descriptors with a texture and a uniform buffer.h"
#include "16 Freeing descriptor sets.h"
#include "17 Resetting a descriptor pool.h"
#include "18 Destroying a descriptor pool.h"
#include "19 Destroying a descriptor set layout.h"
#include "20 Destroying a sampler.h"

 #include "01 Specifying attachments descriptions.h"
 #include "02 Specifying subpass descriptions.h"
 #include "03 Specifying dependencies between subpasses.h"
 #include "04 Creating a render pass.h"
 #include "05 Creating a framebuffer.h"
 #include "06 Preparing a render pass for geometry rendering and postprocess subpasses.h"
 #include "07 Preparing a render pass and a framebuffer with color and depth attachments.h"
 #include "08 Beginning a render pass.h"
 #include "09 Progressing to the next subpass.h"
 #include "10 Ending a render pass.h"
 #include "11 Destroying a framebuffer.h"
 #include "12 Destroying a render pass.h"

 #include "01 Creating a shader module.h"
 #include "02 Specifying pipeline shader stages.h"
 #include "03 Specifying pipeline vertex input state.h"
 #include "04 Specifying pipeline input assembly state.h"
 #include "05 Specifying pipeline tessellation state.h"
 #include "06 Specifying pipeline viewport and scissor test state.h"
 #include "07 Specifying pipeline rasterization state.h"
 #include "08 Specifying pipeline multisample state.h"
 #include "09 Specifying pipeline depth and stencil state.h"
 #include "10 Specifying pipeline blend state.h"
 #include "11 Specifying pipeline dynamic states.h"
 #include "12 Creating a pipeline layout.h"
 #include "13 Specifying graphics pipeline creation parameters.h"
 #include "14 Creating a pipeline cache object.h"
 #include "15 Retrieving data from a pipeline cache.h"
 #include "16 Merging multiple pipeline cache objects.h"
 #include "17 Creating graphics pipelines.h"
 #include "18 Creating a compute pipeline.h"
 #include "19 Binding a pipeline object.h"
 #include "20 Creating a pipeline layout with a combined image sampler, a buffer and push constant ranges.h"
 #include "21 Creating a graphics pipeline with vertex and fragment shaders, depth test enabled, and with dynamic viewport and scissor tests.h"
 #include "22 Creating multiple graphics pipelines on multiple threads.h"
 #include "23 Destroying a pipeline.h"
 #include "24 Destroying a pipeline cache.h"
 #include "25 Destroying a pipeline layout.h"
 #include "26 Destroying a shader module.h"

#include "01 Clearing a color image.h"
#include "02 Clearing a depth-stencil image.h"
#include "03 Clearing render pass attachments.h"
#include "04 Binding vertex buffers.h"
#include "05 Binding an index buffer.h"
#include "06 Providing data to shaders through push constants.h"
#include "07 Setting viewport state dynamically.h"
#include "08 Setting scissor state dynamically.h"
#include "09 Setting line width state dynamically.h"
#include "10 Setting depth bias state dynamically.h"
#include "11 Setting blend constants state dynamically.h"
#include "12 Drawing a geometry.h"
#include "13 Drawing an indexed geometry.h"
#include "14 Dispatching compute work.h"
#include "15 Executing secondary command buffer inside a primary command buffer.h"
#include "16 Recording a command buffer that draws a geometry with dynamic viewport and scissor states.h"
#include "17 Recording command buffers on multiple threads.h"
#include "18 Preparing a single frame of animation.h"
#include "19 Increasing the performance through increasing the number of separately rendered frames.h"

 #include "01 Preparing a translation matrix.h"
 #include "02 Preparing a rotation matrix.h"
 #include "03 Preparing a scaling matrix.h"
 #include "04 Preparing a perspective projection matrix.h"
 #include "05 Preparing an orthographic projection matrix.h"
 #include "06 Loading texture data from a file.h"
 #include "07 Loading a 3D model from an OBJ file.h"


#endif // ALL_HEADERS